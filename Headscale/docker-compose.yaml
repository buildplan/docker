## ~/appdata/headscale-deploy$ cat docker-compose.yaml 
services:
  ## -- headscale --
  headscale:
    image: headscale/headscale:${HEADSCALE_TAG:-0.26.1}
    container_name: headscale
    restart: unless-stopped
    depends_on:
      traefik:
        condition: service_started
    command: serve
    volumes:
      - ./headscale/config:/etc/headscale
      - ./headscale/data/lib:/var/lib/headscale
      - ./headscale/data/run:/var/run/headscale
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.headscale-rtr.rule=Host(`${HS_URL}`)"  # URL for accessing Headscale - add in .env
      - "traefik.http.routers.headscale-rtr.priority=90"
      - "traefik.http.routers.headscale-rtr.entrypoints=websecure"
      - "traefik.http.routers.headscale-rtr.tls.certresolver=myresolver"
      - "traefik.http.services.headscale-svc.loadbalancer.server.port=8080"  # Port for Headscale service
      - "traefik.http.routers.headscale-rtr.middlewares=corsHeader@file,secureHeaders@file,cspHeader@file,crowdsec-middleware@file,oVPSgeoBlock@file"
      # - "alis.headplane.target=headscale"
    deploy:
      resources:
        limits: { cpus: '1', memory: 1024M }
    logging:
      driver: "json-file"
      options: { max-size: "5m", max-file: "3" }

  ## -- headplane --
  headplane:
    image: ghcr.io/tale/headplane:${HEADPLANE_TAG:-0.6.0}
    container_name: headplane
    restart: unless-stopped
    environment:
      - HEADPLANE_DEBUG_LOG=false
    volumes:
      - ./headplane/config.yaml:/etc/headplane/config.yaml
      - ./headscale/config/config.yaml:/etc/headscale/config.yaml
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./headplane:/var/lib/headplane
    depends_on:
      headscale:
        condition: service_started
      traefik:
        condition: service_healthy
    labels:
      - traefik.enable=true
      # Router Definition 
      - "traefik.http.routers.headplane-rtr.rule=Host(`${HS_URL}`) && PathPrefix(`/admin`)"
      - "traefik.http.routers.headplane-rtr.priority=100" # sets priority over base-domain
      - "traefik.http.routers.headplane-rtr.entrypoints=websecure"
      - "traefik.http.routers.headplane-rtr.tls.certresolver=myresolver"
      - "traefik.http.services.headplane-svc.loadbalancer.server.port=3000" # headplane port
      - "traefik.http.routers.headplane-rtr.middlewares=headplane-addslash@file,corsHeader@file,secureHeaders@file,cspHeader@file,crowdsec-middleware@file,oVPSgeoBlock@file"
    deploy:
      resources:
        limits: { cpus: '0.25', memory: 512M }
    logging:
      driver: "json-file"
      options: { max-size: "5m", max-file: "3" }

  ## -- headscale-admin --
  headscale-admin:
    image: goodieshq/headscale-admin:${HSADMIN_TAG:-0.25.6}
    container_name: headscale-admin
    restart: unless-stopped
    depends_on:
      headscale:
        condition: service_started
      traefik:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.headscale-admin-extra-rtr.rule=Host(`${HUI_URL}`)"
      - "traefik.http.routers.headscale-admin-extra-rtr.entrypoints=websecure"
      - "traefik.http.routers.headscale-admin-extra-rtr.tls.certresolver=myresolver"
      - "traefik.http.services.headscale-admin-extra-svc.loadbalancer.server.port=80"
      - "traefik.http.routers.headscale-admin-extra-rtr.middlewares=corsHeader@file,crowdsec-middleware@file,oVPSgeoBlock@file,oidcAuth@file"
    logging:
      driver: "json-file"
      options: { max-size: "5m", max-file: "3" }

  ## -- cloudflare-dns-sync --
  cloudflare-dns-sync:
    image: iamdockin/hs-cf-dns-sync:${CFDNS_TAG:-0.0.3}
    container_name: cloudflare-dns-sync
    labels:
      - "traefik.enable=false"
    depends_on:
      headscale:
        condition: service_started
    restart: unless-stopped
    env_file:
      - ./.cloudflare-dns-sync.env
    command: ["python", "app.py"] # runs the script
    # command for debug
    # command: ["python", "-c", "import os; import time; print(f'PYTHON TEST OK. MODE IS ({os.environ.get(\"mode\")}) - Timestamp: {time.time()}')"]
    deploy:
      resources:
        limits: { cpus: '0.25', memory: 256M }
    logging:
      driver: "json-file"
      options: { max-size: "5m", max-file: "3" }

  ## -- traefik proxy --
  traefik:
    image: traefik:${TRAEFIK_TAG:-v3.4.1}
    restart: unless-stopped
    container_name: traefik
    depends_on:
      crowdsec:
        condition: service_healthy
    command:
      # - --log.filePath=/var/log/traefik/app
      - "--providers.file.filename=/etc/traefik/dynamic/tls.yml"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"
      - "--accesslog=true"
      - "--accesslog.filePath=/var/log/traefik/access.log"
      - "--accesslog.format=json"
      - "--log.level=INFO"
      - "--ping=true"
      - "--api=true"
      - "--api.dashboard=true"
      - "--providers.docker"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http3=true"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${LE_EMAIL}" # in .env
      - "--certificatesresolvers.myresolver.acme.storage=/certificates/acme.json"
      - "--global.sendAnonymousUsage=false"
      - "--entrypoints.websecure.http.tls.options=securetls@file" # for TLS
      # --- CROWDSEC PLUGIN ---
      - "--experimental.plugins.crowdsec.modulename=github.com/maxlerebourg/crowdsec-bouncer-traefik-plugin"
      - "--experimental.plugins.crowdsec.version=v1.4.2"
      # --- GEOBLOCK PLUGIN ---
      - "--experimental.plugins.geoblock.modulename=github.com/PascalMinder/geoblock"
      - "--experimental.plugins.geoblock.version=v0.3.3"
      # --- OIDC ---
      - "--experimental.plugins.traefik-oidc-auth.modulename=github.com/sevensolutions/traefik-oidc-auth"
      - "--experimental.plugins.traefik-oidc-auth.version=v0.11.0"
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/certificates:/certificates
      - ./traefik/logs:/var/log/traefik
      - ./traefik/tls.yml:/etc/traefik/dynamic/tls.yml
      - ./traefik/middlewares.yml:/etc/traefik/dynamic/middlewares.yml
    labels:
      # ---- traefik Dashboard Labels ----
      # - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_DASHBOARD_AUTH}"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`${TRAEFIK_DASHBOARD_URL}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik-dashboard.middlewares=corsHeader@file,crowdsec-middleware@file,oVPSgeoBlock@file,oidcAuth@file"
      # - "traefik.http.routers.traefik-dashboard.middlewares=dashboard-auth"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"

      # ---- Router for HS_URL root redirect ----
      - "traefik.http.routers.hs-root-redirect.rule=Host(`${HS_URL}`) && Path(`/`)"
      - "traefik.http.routers.hs-root-redirect.priority=95"
      - "traefik.http.routers.hs-root-redirect.entrypoints=websecure"
      - "traefik.http.routers.hs-root-redirect.tls.certresolver=myresolver"
      - "traefik.http.routers.hs-root-redirect.middlewares=redirect-heads-root-to-admin-slash@file,secureHeaders@file,cspHeader@file"
      - "traefik.http.routers.hs-root-redirect.service=noop@internal"

      # ---- Router for HUI_URL ----
      - "traefik.http.routers.hui-root-redirect.rule=Host(`${HUI_URL}`) && Path(`/`)"
      - "traefik.http.routers.hui-root-redirect.priority=95"
      - "traefik.http.routers.hui-root-redirect.entrypoints=websecure"
      - "traefik.http.routers.hui-root-redirect.tls.certresolver=myresolver"
      - "traefik.http.routers.hui-root-redirect.middlewares=redirect-hui-root-to-admin@file,secureHeaders@file"
      - "traefik.http.routers.hui-root-redirect.service=noop@internal"

      # ---- Global Redirect HTTP to HTTPS ----
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirectToHttps@file"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--output-document=/dev/null", "http://127.0.0.1:8080/ping"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits: { cpus: '0.50', memory: 512M }
    logging:
      driver: "json-file"
      options: { max-size: "5m", max-file: "3" }

  ## -- crowdsec agent --
  crowdsec:
    image: crowdsecurity/crowdsec:${CROWDSEC_TAG:-latest}
    container_name: crowdsec
    restart: unless-stopped
    expose:
      - "8080"
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - ./crowdsec/config:/etc/crowdsec:rw
      - ./crowdsec/data:/var/lib/crowdsec/data:rw
      - ./traefik/logs:/var/log/traefik:ro
      - /var/log/syslog:/var/log/host_syslog:ro
      - /var/log/auth.log:/var/log/host_auth.log:ro
      - /var/log/ufw.log:/var/log/host_ufw.log:ro
    environment:
      GID: "${GID:-1001}"
      COLLECTIONS: "crowdsecurity/traefik crowdsecurity/sshd crowdsecurity/linux crowdsecurity/base-http-scenarios crowdsecurity/whitelist-good-actors crowdsecurity/appsec-virtual-patching crowdsecurity/appsec-generic-rules crowdsecurity/iptables"
    healthcheck:
      test: ["CMD-SHELL", "cscli lapi status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits: { cpus: '0.25', memory: 512M }
    logging:
      driver: "json-file"
      options: { max-size: "5m", max-file: "3" }
